export declare const chain: {
    addnode(params: any): Promise<import("axios").AxiosResponse<any>>;
    createrawtransaction(params: any): Promise<import("axios").AxiosResponse<any>>;
    decoderawtransaction(params: any, network: any): any;
    getbestblock(params?: any): any;
    decodescript(params: any): Promise<import("axios").AxiosResponse<any>>;
    getaddednodeinfo(params: any): Promise<import("axios").AxiosResponse<any>>;
    getbestblockhash(params: any): Promise<import("axios").AxiosResponse<any>>;
    getrecentblocklist(params: any): Promise<import("axios").AxiosResponse<any>>;
    getblock(params: any): Promise<import("axios").AxiosResponse<any>>;
    getblocklist(params: any): Promise<import("axios").AxiosResponse<any>>;
    getblockchaininfo(params?: any, network?: any): any;
    getblockcount(params: any): Promise<import("axios").AxiosResponse<any>>;
    getblockhash(params: any): Promise<import("axios").AxiosResponse<any>>;
    getblockheader(params: any): Promise<import("axios").AxiosResponse<any>>;
    getblocktemplate(params: any): Promise<import("axios").AxiosResponse<any>>;
    getcfilter(params: any): Promise<import("axios").AxiosResponse<any>>;
    getcfilterheader(params: any): Promise<import("axios").AxiosResponse<any>>;
    getchaintips(params: any): Promise<import("axios").AxiosResponse<any>>;
    getconnectioncount(params: any): Promise<import("axios").AxiosResponse<any>>;
    getdifficulty(params: any): Promise<import("axios").AxiosResponse<any>>;
    getgenerate(params: any): Promise<import("axios").AxiosResponse<any>>;
    gethashespersec(params: any): Promise<import("axios").AxiosResponse<any>>;
    getinfo(params: any): Promise<import("axios").AxiosResponse<any>>;
    getmempoolentry(params: any): Promise<import("axios").AxiosResponse<any>>;
    getmempoolinfo(params: any): Promise<import("axios").AxiosResponse<any>>;
    getnetworkinfo(params: any): Promise<import("axios").AxiosResponse<any>>;
    getnettotals(params: any): Promise<import("axios").AxiosResponse<any>>;
    getnetworkhashps(params: any): Promise<import("axios").AxiosResponse<any>>;
    getpeerinfo(params: any): Promise<import("axios").AxiosResponse<any>>;
    getrawmempool(params: any): Promise<import("axios").AxiosResponse<any>>;
    getrawtransaction(params: any, network: any): any;
    gettxout(params: any): Promise<import("axios").AxiosResponse<any>>;
    gettxoutproof(params: any): Promise<import("axios").AxiosResponse<any>>;
    gettxoutsetinfo(params: any): Promise<import("axios").AxiosResponse<any>>;
    getwork(params: any): Promise<import("axios").AxiosResponse<any>>;
    help(params: any): Promise<import("axios").AxiosResponse<any>>;
    invalidateblock(params: any): Promise<import("axios").AxiosResponse<any>>;
    ping(params: any): Promise<import("axios").AxiosResponse<any>>;
    preciousblock(params: any): Promise<import("axios").AxiosResponse<any>>;
    reconsiderblock(params: any): Promise<import("axios").AxiosResponse<any>>;
    setgenerate(params: any): Promise<import("axios").AxiosResponse<any>>;
    stop(params: any): Promise<import("axios").AxiosResponse<any>>;
    submitblock(params: any): Promise<import("axios").AxiosResponse<any>>;
    uptime(params: any): Promise<import("axios").AxiosResponse<any>>;
    validateaddress(params: any): Promise<import("axios").AxiosResponse<any>>;
    verifychain(params: any): Promise<import("axios").AxiosResponse<any>>;
    verifymessage(params: any): Promise<import("axios").AxiosResponse<any>>;
    verifytxoutproof(params: any): Promise<import("axios").AxiosResponse<any>>;
    listsinceblock(params: any): Promise<import("axios").AxiosResponse<any>>;
    sendfrom(params: any): Promise<import("axios").AxiosResponse<any>>;
    signrawtransaction(params: any): Promise<import("axios").AxiosResponse<any>>;
    getcoinvalue(params: any): Promise<import("axios").AxiosResponse<any>>;
    getassetvalue(params: any): Promise<import("axios").AxiosResponse<any>>;
    getallcoinvalues(params: any): Promise<import("axios").AxiosResponse<any>>;
    getallassetvalues(params: any): Promise<import("axios").AxiosResponse<any>>;
    searchrawtransactions(params: any, network: any): any;
    searchrawtransactionsbyaddrs(addrs: any, network: any): any;
    sendrawtransaction(params: any, network?: string): any;
    getmempooltransactions(params: any, network: any): any;
    calculatecontractaddress(params: any, network: any): any;
    getcontractaddressesbyassets(params: any, network: any): any;
    callreadonlyfunction(params: any, network: any): any;
    gettransactionsbyaddresses(params: any, network: any): any;
};
